openapi: 3.0.3
info:
  title: Swagger SOD - OpenAPI 3.0
  description: |-
  
    SOD APIs are based on the OpenAPI 3.0 specification. 
    
    You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). 
    
    In the this iteration of the SOD APIs, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OpenAPI Specification (OAS) 3.0.
    
    The SOD API will offer a comprehensive suite of endpoints to manage various aspects of Segregation of Duties, including: Violations management, Business functions and risk definitions, Function objects and entitlements, Mitigating controls and simulations, Job scheduling and execution, Ruleset creation and maintenance

    
    Some useful links:
    - [The SOD API repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the SOD](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
    
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://client.saviyntcloud.com/api/v3
  
  
tags:
  - name: risk
    description: Everything about SOD Risks
    externalDocs:
      description: Find out more about SOD Risks
      url: http://swagger.io
  - name: function
    description: Everything about SOD Functions
    externalDocs:
      description: Find out more about SOD Functions
      url: http://swagger.io
    
paths:
  /risk:
    put:
      tags:
        - risk
      summary: Update an existing risk
      description: Update an existing risk by Id
      operationId: updateRisk
      requestBody:
        description: Update an existent risk in the SoD Ruleset
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Risk'
          application/xml:
            schema:
              $ref: '#/components/schemas/Risk'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Risk'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Risk'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Risk'
        '400':
          description: Invalid ID supplied
        '404':
          description: Risk not found
        '422':
          description: Validation exception
      security:
        - sod_auth:
            - write:risks
            - read:risks
    post:
      tags:
        - risk
      summary: Add a new risk
      description: Add a new risk
      operationId: addRisk
      requestBody:
        description: Create a new risk
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Risk'
          application/xml:
            schema:
              $ref: '#/components/schemas/Risk'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Risk'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Risk'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Risk'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - sod_auth:
            - write:risks
            - read:risks
  /risk/findByStatus:
    get:
      tags:
        - risk
      summary: Finds risks by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findRisksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: Active
            enum:
              - Active
              - Inactive
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Risk'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Risk'
        '400':
          description: Invalid status value
      security:
        - sod_auth:
            - write:risks
            - read:risks
  /risk/findByPriority:
    get:
      tags:
        - risk
      summary: Finds Risks by Priority
      description: Multiple Priority can be provided with comma separated strings. Use High, Low, Critical for testing.
      operationId: findRisksByPriority
      parameters:
        - name: Priority
          in: query
          description: Priority to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Risk'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Risk'
        '400':
          description: Invalid Priority value
      security:
        - sod_auth:
            - write:risks
            - read:risks
  /risk/{riskId}:
    get:
      tags:
        - risk
      summary: Find risk by ID
      description: Returns a single risk
      operationId: getRiskById
      parameters:
        - name: riskId
          in: path
          description: ID of risk to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Risk'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Risk'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - sod_auth:
            - write:risks
            - read:risks
    post:
      tags:
        - risk
      summary: Updates a risk with form data
      description: ''
      operationId: updateRiskWithForm
      parameters:
        - name: riskId
          in: path
          description: ID of risk that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of risk that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of risk that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - sod_auth:
            - write:risks
            - read:risks
    delete:
      tags:
        - risk
      summary: Deletes a risk
      description: delete a risk
      operationId: deleteRisk
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: riskId
          in: path
          description: Risk id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Risk value
      security:
        - sod_auth:
            - write:risks
            - read:risks
  /function:
    put:
      tags:
        - function
      summary: Update an existing function
      description: Update an existing function by Id
      operationId: updateFunction
      requestBody:
        description: Update an existent function in the SoD Ruleset
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Function'
          application/xml:
            schema:
              $ref: '#/components/schemas/Function'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Function'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Function'
        '400':
          description: Invalid ID supplied
        '404':
          description: function not found
        '422':
          description: Validation exception
      security:
        - sod_auth:
            - write:functions
            - read:functions
    post:
      tags:
        - function
      summary: Add a new function
      description: Add a new function
      operationId: addFunction
      requestBody:
        description: Create a new function
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Function'
          application/xml:
            schema:
              $ref: '#/components/schemas/Function'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Function'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Function'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - sod_auth:
            - write:functions
            - read:functions
  /function/findByStatus:
    get:
      tags:
        - function
      summary: Finds functions by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findFunctionsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: Active
            enum:
              - Active
              - Inactive
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'
        '400':
          description: Invalid status value
      security:
        - sod_auth:
            - write:functions
            - read:functions
  /function/findByPriority:
    get:
      tags:
        - function
      summary: Finds functions by Priority
      description: Multiple Priority can be provided with comma separated strings. Use High, Low, Critical for testing.
      operationId: findFunctionsByPriority
      parameters:
        - name: Priority
          in: query
          description: Priority to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Function'
        '400':
          description: Invalid Priority value
      security:
        - sod_auth:
            - write:functions
            - read:functions
  /function/{functionId}:
    get:
      tags:
        - function
      summary: Find function by ID
      description: Returns a single function
      operationId: getFunctionById
      parameters:
        - name: functionId
          in: path
          description: ID of function to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Function'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - sod_auth:
            - write:functions
            - read:functions
    post:
      tags:
        - function
      summary: Updates a function with form data
      description: ''
      operationId: updateFunctionWithForm
      parameters:
        - name: functionId
          in: path
          description: ID of function that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of function that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of function that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - sod_auth:
            - write:functions
            - read:functions
    delete:
      tags:
        - function
      summary: Deletes a function
      description: delete a function
      operationId: deleteFunction
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: functionId
          in: path
          description: function id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid function value
      security:
        - sod_auth:
            - write:functions
            - read:functions
components:
  schemas:
    Risk:
      required:
        - riskName
        - ruleset
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2131
        riskName:
          type: string
          example: Bill Customer conflicts with Post Payment
        description:
           type: string
           example: The ability to setup customer bill and apply review payment
        riskOwner:
           $ref: '#/components/schemas/RiskOwner'
        comments:
           type: string
           example: "Add comments here"
        priority:
           type: string
           example: "high"
        riskType:
           type: string
           example: "SOD"
        ruleset:
           type: integer
           format: int64
           example: 12
        function1:
          type: integer
          format: int64
          example: 21
        function2:
          type: integer
          format: int64
          example: 32
        function3:
          type: integer
          format: int64
          example: 43
        function4:
          type: integer
          format: int64
          example: 51
        function5:
          type: integer
          format: int64
          example: 63
        businessProcess:
          type: integer
          format: int64
          example: 71
        analyticsConfig:
              type: integer
              format: int64
              example: 345
        status:
              type: string
              description: risk status
              enum:
                - Active
                - Inactive
    RiskOwner:
      required:
        - type
        - value
        - rank
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12
        type:
          type: string
          example: user
        value:
           type: string
           example: johnDoe
        rank:
           type: integer
           format: int64
           example: 1
    FunctionOwner:
      required:
        - type
        - value
        - rank
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12
        type:
          type: string
          example: user
        value:
           type: string
           example: johnDoe
        rank:
           type: integer
           format: int64
           example: 1
    Function:
      required:
        - functionName
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2131
        functionName:
          type: string
          example: AP02 - Process Vendor Invoices and purchase
        description:
           type: string
           example: Ability to perform AP02 - Process Vendor Invoices and purchase
        functionOwner:
           $ref: '#/components/schemas/FunctionOwner'
        customProperty1:
           type: string
           example: "CP1"
        customProperty2:
           type: string
           example: "CP2"
        customProperty3:
           type: string
           example: "CP3"
        customProperty4:
           type: string
           example: "CP4"
        customProperty5:
           type: string
           example: "CP5"
        exclusionQry:
           type: string
           example: "select from table"
        functionType:
           type: string
           example: "SAP"
        ruleset:
           type: integer
           format: int64
           example: 12
        status:
              type: string
              description: function status
              enum:
                - Active
                - Inactive       
  securitySchemes:
    sod_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://sod.swagger.io/oauth/authorize
          scopes:
            write:risks: modify risks
            read:risks: read risks
            write:functions: modify functions
            read:functions: read functions
    api_key:
      type: apiKey
      name: api_key
      in: header