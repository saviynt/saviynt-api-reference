post:
  tags:
    - Password Management
  summary: Create Security Questions
  description: >-
    This API is used to create security questions in Saviynt.

    The `Authorization` must have `Bearer` followed by `Token`.

    Mandatory params:

    `question`

    `endpointfield`

    `section`

    Optional Params:

    `description`, `questionorder`, `answertype` (by default 'FREETEXT'),
    `answerrequired` (by default 'false'), `answereditable`(by default 'true'),
    `defaultvalue`, `updateuser`
  operationId: createSecurityQuestions
  requestBody:
    content:
      application/json:
        schema:
          type: object
          properties:
            answereditable:
              type: string
              example: 'false'
            answerrequired:
              type: string
              example: 'true'
            answertype:
              type: string
              example: radio
            defaultvalue:
              type: string
              example: sav123
            description:
              type: string
              example: desc....api
            endpointfield:
              type: string
              example: customproperty29
            question:
              type: string
              example: what is your employeeid?
            questionorder:
              type: string
              example: '3'
            section:
              type: string
              example: Application Type
            updateuser:
              type: string
              example: awsadmin
        examples:
          Create Security Questions:
            value:
              answereditable: 'false'
              answerrequired: 'true'
              answertype: radio
              defaultvalue: sav123
              description: desc....api
              endpointfield: customproperty29
              question: what is your employeeid?
              questionorder: '3'
              section: Application Type
              updateuser: awsadmin
  responses:
    '200':
      description: Create Security Questions
      headers:
        Access-Control-Allow-Credentials:
          schema:
            type: string
            example: 'true'
        Access-Control-Allow-Origin:
          schema:
            type: string
            example: 'http://localhost'
        Cache-Control:
          schema:
            type: string
            example: 'post-check=0, pre-check=0'
        Date:
          schema:
            type: string
            example: 'Thu, 31 Dec 2020 21:37:41 GMT'
        Expires:
          schema:
            type: string
            example: 'Sun, 7 May 1995 12:00:00 GMT'
        Referrer-Policy:
          schema:
            type: string
            example: same-origin
        Server:
          schema:
            type: string
            example: Apache-Coyote/1.1
        Set-Cookie:
          schema:
            type: string
            example: CCSRF-TOKEN=e02759e0-a4a0-4963-bd4d-b232621fd21e; Path=/
        Strict-Transport-Security:
          schema:
            type: string
            example: max-age=31536000; includeSubdomains
        X-Content-Type-Options:
          schema:
            type: string
            example: nosniff
        X-Frame-Options:
          schema:
            type: string
            example: DENY
      content:
        application/json:
          schema:
            type: object
            properties:
              errorcode:
                type: number
                example: 0
              msg:
                type: string
                example: Success
          examples:
            Create Security Questions:
              value:
                errorcode: 0
                msg: Success
